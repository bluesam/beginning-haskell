It is a functional programming language.
Every thing in it is immutable
Functions can be passed as a parameter to other functions
Recursion is used very often
Does haskell have loops?
does it have variables like other programming languages?
does it have constants?
how can it do so much without the usual features?
how is Haskell compiler strict?
learn you a haskell is great free online book
open terminal and run ghci by typing ghci
type :l file-name in ghci to open a file in ghci
type :r in ghci run everything in ghci
use -- for single line comments
use {--} for multi-line comments
{-
some comment
another comment
-}
use import to import modules
import Data.List
import System.IO

What is type inference? how does it work in Haskell?
what is statically typed language?
some types in haskell:
Int -2^63 to 2^63

you gotta compile it in ghci using :r before running it
for example type this in the code
maxInt = maxBound :: Int
then :r in ghci
then type maxInt in ghci and hit enter
can't understand the syntax of the line maxInt = maxBound :: Int
is maxInt a variaable/function here and maxBound is another function and Int is the value to the function? then what exactly :: ? what does this symbol :: do?

why do all programming languages come to a fault when floats are used?
what are single unicode characters?

u can use `(back ticks) to use a better way to represent function
back tick is called infix operator
for example 5 `mod` 4 where mod is for getting the remainder of a division

u can use :t in ghci to get the working of a function for example :t sqrt
I don't understand this concept of :t properly. Can it also be used in code and not just ghci?

lists in Haskell are single linked.

why is Haskell considered a very safe language?

check the list of all the built-in operations available on lists

can u think of curry function as method usage in its overloaded version like done once in SimplyProgress?

how do infinite lists work in Haskell? how does laziness help it?

study advanced Haskell list filtration

usage of zipWith

is there a while loop in Haskell that is similar to other programming languages?
is there a for loop in Haskell?

how to use foldl and foldr in Haskell for complex stuff like foldl (\x y -> 2*x + y) 4 [1,2,3]?

what is meant by list comprehension? and why is it a very important concept?

what are tuple pairs?

u can use let to make functions in ghci too for example let num7 =, let getTriple x = x * 3, getTriple num7

how does main function in Haskell work?

is indentation important in Haskell?

in order to run main from ghci mode, just call the main function by typing main and hitting enter
in order to run main automatically in a compiled file first compile it using
ghc --make filename
then run it by
./topic1

what is type declaration?

when to use let?

why must the functions in Haskell must return something always?
why can't the function name start with an upper case letter?

any function that doesn't receive a parameter is simply a name or definition. but how and why?

if Haskell can figure out type declaration itself, then why define one? is it just for making things clearer for the coder?
or is there any other reason for it? how to know when to declare types and when not?

:q for quiting ghci

what are non-exhaustive patterns in a function?

how to use if conditions in functions?

what are guards in Haskell?

are there if and else in Haskell? are | and otherwise the equivalent of those in Haskell?

what is the use of where in haskell?

what is the purpose of "show" in Haskell?

what are as patterns in Haskell?

what is the use of all in Haskell?

can you use y and ys instead of x and xs in Haskell?

what are higher order functions in Haskell?

how to use map in Haskell?

what is lambda in Haskell? is it a function that doesn't have a name?
what are some use cases for lambda functions?

is if always followed by a then in Haskell?

is there a switch in haskell? or is case used without the keyword switch?

what are modules in Haskell?

what are enumerated types? what are their uses?